#!/bin/bash

BRANCH=`git rev-parse --abbrev-ref HEAD`

if [ "`git diff HEAD --name-only`" ]; then
	echo "You have unstaged changes. Please save or stash them before continuing."
	exit 1
fi


git checkout master || exit 1
git pull || exit 1

echo "Attempting bundle install"
bundle install

BRANCHES=`git for-each-ref --sort=-committerdate refs/heads/ --format="%(refname:short)" | grep -v '^master$'`

BRANCHES_FAILED=""
BRANCHES_REMOVED=""

BRANCHES_TO_REMOVE="`merged-branches` `branches_to_delete | grep -v $BRANCH`"

for branch in $BRANCHES; do
	# Why the fuck does Gemfile-local.lock get changed? I don't wanna spend time debugging this
	if [ "`git diff HEAD --name-only`" = "Gemfile-local.lock" ]; then
		echo "Skipping gemfile lock nonsense"
		git reset --hard
	fi

	if (cat `reponame`/.pull_locks 2>/dev/null | grep -e "^$branch\$" > /dev/null); then
		echo "Branch $branch locked by pull lock"
	elif (echo $BRANCHES_TO_REMOVE | grep $branch > /dev/null); then
		parsed_branch=`git rev-parse $branch`
		echo "Removing merged branch $branch (was $parsed_branch)"
		BRANCHES_REMOVED="$BRANCHES_REMOVED $branch($parsed_branch)"
		git branch -D $branch
	else
		git rebase master $branch
		if [ $? -ne 0 ]; then
			git rebase --abort
			BRANCHES_FAILED="$BRANCHES_FAILED $branch"
			echo "Branch failed: $branch"
		else
			echo "Branch success: $branch"
		fi
	fi
done

if (echo $BRANCHES_TO_REMOVE | grep $BRANCH > /dev/null); then
	git checkout master
else
	git checkout $BRANCH
fi

echo "Finishing with a remote prune (this takes a little bit of time)"
git remote prune origin

echo "===DONE==="

if [ "$BRANCHES_REMOVED" ]; then
	echo -e "\033[33m===REMOVED BRANCHES===\033[0m"
	for branch_ref in $BRANCHES_REMOVED; do
		echo $branch_ref
	done
fi

if [ "$BRANCHES_FAILED" ]; then
	echo -e "\033[31m===FAILED BRANCHES===\033[0m"
	for branch in $BRANCHES_FAILED; do
		echo $branch
	done
fi

if [ "`git diff HEAD --name-only`" = "Gemfile-local.lock" ]; then
		git reset --hard
fi
